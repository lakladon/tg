#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–≥—Ä—ã
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import BUSINESS_TYPES, IMPROVEMENTS, RANDOM_EVENTS
from game_logic import GameLogic
from advanced_features import AdvancedGameFeatures
from database import GameDatabase

def test_basic_game_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏...")
    
    game_logic = GameLogic()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    test_player = {
        'user_id': 12345,
        'username': 'test_user',
        'first_name': 'Test',
        'balance': 50000,
        'level': 3,
        'experience': 2500,
        'popularity': 1.2
    }
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å
    test_business = {
        'id': 1,
        'user_id': 12345,
        'business_type': 'coffee_shop',
        'name': 'Test Coffee',
        'income': 1000,
        'expenses': 500,
        'level': 2,
        'improvements': ['equipment']
    }
    
    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫: {test_player['first_name']} (–£—Ä–æ–≤–µ–Ω—å {test_player['level']})")
    print(f"üè¢ –¢–µ—Å—Ç–æ–≤—ã–π –±–∏–∑–Ω–µ—Å: {test_business['name']} ({BUSINESS_TYPES[test_business['business_type']]['emoji']})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç—ã –¥–æ—Ö–æ–¥–æ–≤
    daily_income = game_logic.calculate_daily_income(test_business, test_business['improvements'])
    daily_expenses = game_logic.calculate_daily_expenses(test_business, test_business['improvements'])
    net_income = daily_income - daily_expenses
    
    print(f"\nüí∞ –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥: {test_business['income']:,} ‚ÇΩ/–¥–µ–Ω—å")
    print(f"üõ† –° —É–ª—É—á—à–µ–Ω–∏—è–º–∏: {daily_income:,.0f} ‚ÇΩ/–¥–µ–Ω—å")
    print(f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {daily_expenses:,.0f} ‚ÇΩ/–¥–µ–Ω—å")
    print(f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {net_income:,.0f} ‚ÇΩ/–¥–µ–Ω—å")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    print(f"\nüé≤ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
    for i in range(3):
        event = game_logic.get_random_event(test_player['level'])
        if event:
            print(f"  {i+1}. {event['title']} - {event['description']}")
        else:
            print(f"  {i+1}. –°–æ–±—ã—Ç–∏–π –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    print(f"\nüõ† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π...")
    for improvement_id, improvement_info in IMPROVEMENTS.items():
        can_afford = game_logic.can_afford_improvement(test_player['balance'], improvement_id)
        status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ" if can_afford else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        print(f"  {improvement_info['name']}: {improvement_info['cost']:,} ‚ÇΩ - {status}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    print(f"\n‚≠ê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—Ä–æ–≤–Ω–µ–π...")
    current_exp = test_player['experience']
    current_level = test_player['level']
    required_exp = game_logic.calculate_level_up_experience(current_level)
    
    print(f"  –¢–µ–∫—É—â–∏–π –æ–ø—ã—Ç: {current_exp:,}")
    print(f"  –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è {current_level + 1} —É—Ä–æ–≤–Ω—è: {required_exp:,}")
    
    if game_logic.can_level_up(current_exp, current_level):
        level_up_result = game_logic.level_up_player(test_player)
        print(f"  üéâ {level_up_result['message']}")
    else:
        print(f"  üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è")
    
    print("\n" + "="*50)

def test_advanced_features():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
    
    advanced = AdvancedGameFeatures()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫
    test_player = {
        'user_id': 12345,
        'username': 'test_user',
        'first_name': 'Test',
        'balance': 100000,
        'level': 5,
        'experience': 5000,
        'popularity': 1.5,
        'total_income': 15000,
        'total_expenses': 8000
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–µ–¥–∏—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    print(f"\nüè¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    loan_amount = 50000
    eligibility = advanced.calculate_loan_eligibility(test_player, loan_amount)
    
    print(f"  –ó–∞–ø—Ä–æ—Å –∫—Ä–µ–¥–∏—Ç–∞: {loan_amount:,} ‚ÇΩ")
    print(f"  –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {eligibility['credit_score']}")
    print(f"  –°—Ç–∞—Ç—É—Å: {'‚úÖ –û–¥–æ–±—Ä–µ–Ω' if eligibility['eligible'] else '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω'}")
    
    if eligibility['eligible']:
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {eligibility['max_amount']:,} ‚ÇΩ")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {eligibility['interest_rate']*100:.1f}%/–¥–µ–Ω—å")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç
        loan_result = advanced.process_loan(test_player, loan_amount, 7)
        print(f"  üìã {loan_result['message']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    print(f"\nüíº –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π...")
    test_business = {
        'id': 1,
        'business_type': 'it_startup',
        'income': 3000,
        'expenses': 800,
        'improvements': ['equipment', 'staff']
    }
    
    investment_amount = 20000
    investment_potential = advanced.calculate_investment_potential(test_business, investment_amount)
    
    print(f"  –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ {BUSINESS_TYPES[test_business['business_type']]['emoji']} IT-—Å—Ç–∞—Ä—Ç–∞–ø")
    print(f"  –°—É–º–º–∞: {investment_amount:,} ‚ÇΩ")
    print(f"  –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {investment_potential['expected_return']*100:.1f}%")
    print(f"  –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {investment_potential['risk_level']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º PvP
    print(f"\n‚öîÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PvP —Å–∏—Å—Ç–µ–º—ã...")
    player1 = test_player.copy()
    player2 = {
        'user_id': 67890,
        'username': 'opponent',
        'first_name': 'Opponent',
        'balance': 80000,
        'level': 4,
        'experience': 4000,
        'popularity': 1.1
    }
    
    bet_amount = 10000
    pvp_result = advanced.calculate_pvp_outcome(player1, player2, bet_amount)
    
    print(f"  {player1['first_name']} vs {player2['first_name']}")
    print(f"  –°—Ç–∞–≤–∫–∞: {bet_amount:,} ‚ÇΩ")
    print(f"  –°–∏–ª–∞ {player1['first_name']}: {pvp_result['player1_power']:.0f}")
    print(f"  –°–∏–ª–∞ {player2['first_name']}: {pvp_result['player2_power']:.0f}")
    print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {pvp_result['outcome'].upper()}")
    
    if pvp_result['winner']:
        print(f"  üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {pvp_result['winner']['first_name']}")
        print(f"  üí∞ –ù–∞–≥—Ä–∞–¥–∞: {pvp_result['reward']:,.0f} ‚ÇΩ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    print(f"\nüìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
    for i in range(2):
        market_event = advanced.generate_market_event(test_player['level'])
        print(f"  {i+1}. {market_event['title']}")
        print(f"     {market_event['description']}")
        print(f"     –≠—Ñ—Ñ–µ–∫—Ç: {market_event['effect']}, –∑–Ω–∞—á–µ–Ω–∏–µ: {market_event['value']}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω–µ—Ä–≥–∏—é –±–∏–∑–Ω–µ—Å–æ–≤
    print(f"\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω–µ—Ä–≥–∏–∏ –±–∏–∑–Ω–µ—Å–æ–≤...")
    business1 = {'business_type': 'coffee_shop', 'id': 1}
    business2 = {'business_type': 'restaurant', 'id': 2}
    
    synergy = advanced.calculate_business_synergy(business1, business2)
    if synergy['has_synergy']:
        print(f"  ‚úÖ {synergy['synergy_info']['name']}")
        print(f"     {synergy['synergy_info']['description']}")
        print(f"     –ë–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥—É: +{synergy['income_bonus']*100:.0f}%")
        print(f"     –°–Ω–∏–∂–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: -{synergy['expense_reduction']*100:.0f}%")
    else:
        print(f"  ‚ùå –°–∏–Ω–µ—Ä–≥–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    print("\n" + "="*50)

def test_business_types():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞"""
    print("üè¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞...")
    
    for business_id, business_info in BUSINESS_TYPES.items():
        print(f"\n{business_info['emoji']} {business_info['name']}")
        print(f"  üìù {business_info['description']}")
        print(f"  üí∞ –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥: {business_info['base_income']:,} ‚ÇΩ/–¥–µ–Ω—å")
        print(f"  üí∏ –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {business_info['base_expenses']:,} ‚ÇΩ/–¥–µ–Ω—å")
        print(f"  üìà –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {business_info['growth_rate']}x")
        print(f"  ‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {business_info['risk_level']}")
    
    print("\n" + "="*50)

def test_improvements():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ª—É—á—à–µ–Ω–∏–π"""
    print("üõ† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ª—É—á—à–µ–Ω–∏–π...")
    
    for improvement_id, improvement_info in IMPROVEMENTS.items():
        print(f"\n{improvement_info['name']}")
        print(f"  üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {improvement_info['cost']:,} ‚ÇΩ")
        print(f"  üìù {improvement_info['description']}")
        
        if 'income_boost' in improvement_info:
            print(f"  üìà –ë–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥—É: +{improvement_info['income_boost']*100:.0f}%")
        if 'expense_boost' in improvement_info:
            print(f"  üí∏ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤: +{improvement_info['expense_boost']*100:.0f}%")
        if 'popularity_boost' in improvement_info:
            print(f"  ‚≠ê –ë–æ–Ω—É—Å –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏: +{improvement_info['popularity_boost']*100:.0f}%")
    
    print("\n" + "="*50)

def test_random_events():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    print("üé≤ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
    
    for i, event in enumerate(RANDOM_EVENTS, 1):
        emoji = "‚úÖ" if event['type'] == 'positive' else "‚ùå"
        print(f"\n{i}. {emoji} {event['title']}")
        print(f"   üìù {event['description']}")
        
        if 'income_bonus' in event:
            print(f"   üí∞ –ë–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥—É: +{event['income_bonus']:,} ‚ÇΩ")
        if 'expense_penalty' in event:
            print(f"   üí∏ –®—Ç—Ä–∞—Ñ: -{event['expense_penalty']:,} ‚ÇΩ")
        if 'popularity_bonus' in event:
            print(f"   ‚≠ê –ë–æ–Ω—É—Å –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏: +{event['popularity_bonus']*100:.0f}%")
        if 'popularity_penalty' in event:
            print(f"   üìâ –®—Ç—Ä–∞—Ñ –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏: {event['popularity_penalty']*100:.0f}%")
    
    print("\n" + "="*50)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ò–ó–ù–ï–°-–ò–ú–ü–ï–†–ò–ò")
    print("="*50)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        test_basic_game_logic()
        test_advanced_features()
        test_business_types()
        test_improvements()
        test_random_events()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º BOT_TOKEN")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python bot.py")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 