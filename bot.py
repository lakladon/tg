import asyncio
import random
import logging
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import html

from config import BOT_TOKEN, BUSINESS_TYPES, IMPROVEMENTS, ADMIN_IDS
from database import GameDatabase
from game_logic import GameLogic
from advanced_features import AdvancedGameFeatures

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
db = GameDatabase()
game_logic = GameLogic()
advanced = AdvancedGameFeatures()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class GameStates(StatesGroup):
    choosing_business = State()
    business_name = State()
    main_menu = State()
    business_management = State()
    improvements = State()
    competitors = State()
    adding_business = State()
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard(user_id: int = None):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–≥—Ä—ã"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üí∞ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile"))
    keyboard.add(InlineKeyboardButton(text="üè¢ –ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã", callback_data="businesses"))
    keyboard.add(InlineKeyboardButton(text="üõ† –£–ª—É—á—à–µ–Ω–∏—è", callback_data="improvements"))
    keyboard.add(InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å", callback_data="add_business"))
    keyboard.add(InlineKeyboardButton(text="üìä –†–µ–π—Ç–∏–Ω–≥", callback_data="rating"))
    keyboard.add(InlineKeyboardButton(text="üéØ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements"))
    keyboard.add(InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="random_event"))
    keyboard.add(InlineKeyboardButton(text="üìà –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥", callback_data="daily_income"))
    keyboard.add(InlineKeyboardButton(text="üè¶ –ö—Ä–µ–¥–∏—Ç—ã", callback_data="loans"))
    keyboard.add(InlineKeyboardButton(text="üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", callback_data="investments"))
    keyboard.add(InlineKeyboardButton(text="‚öîÔ∏è PvP", callback_data="pvp"))
    keyboard.row(InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"))
    # –î–µ–ª–∏–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏, –∑–∞—Ç–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
    keyboard.adjust(2, 2, 2, 1)
    return keyboard.as_markup()

def get_business_choice_keyboard():
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞"""
    keyboard = InlineKeyboardBuilder()
    for business_id, business_info in BUSINESS_TYPES.items():
        text = f"{business_info['emoji']} {business_info['name']}"
        keyboard.add(InlineKeyboardButton(text=text, callback_data=f"business_{business_id}"))
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    keyboard.adjust(1)
    return keyboard.as_markup()

@router.callback_query(F.data == "add_business")
async def add_business_flow(callback: types.CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"""
    user_id = callback.from_user.id
    businesses = db.get_player_businesses(user_id)
    if len(businesses) >= 2:
        await callback.answer("–£ –≤–∞—Å —É–∂–µ 2 –±–∏–∑–Ω–µ—Å–∞", show_alert=True)
        return
    await state.set_state(GameStates.choosing_business)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞:", reply_markup=get_business_choice_keyboard())


def get_business_management_keyboard(business_id: int):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–∏–∑–Ω–µ—Å–æ–º"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{business_id}"))
    keyboard.add(InlineKeyboardButton(text="üõ† –£–ª—É—á—à–∏—Ç—å", callback_data=f"improve_{business_id}"))
    keyboard.add(InlineKeyboardButton(text="üì¶ –ü—Ä–æ–¥—É–∫—Ü–∏—è", callback_data=f"prod_menu_{business_id}"))
    keyboard.add(InlineKeyboardButton(text="üí∞ –ü—Ä–æ–¥–∞—Ç—å", callback_data=f"sell_{business_id}"))
    keyboard.row(InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data="businesses"))
    return keyboard.as_markup()

def get_improvements_keyboard(business_id: int, player_balance: float):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ª—É—á—à–µ–Ω–∏–π"""
    keyboard = InlineKeyboardBuilder()
    for improvement_id, improvement_info in IMPROVEMENTS.items():
        can_afford = game_logic.can_afford_improvement(player_balance, improvement_id)
        text = f"{improvement_info['name']} ({improvement_info['cost']} ‚ÇΩ)"
        if not can_afford:
            text += " ‚ùå"
        keyboard.add(InlineKeyboardButton(text=text, callback_data=f"buy_improvement_{business_id}_{improvement_id}"))
    keyboard.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="businesses"))
    keyboard.adjust(1)
    return keyboard.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    first_name = message.from_user.first_name or "Player"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.add_player(user_id, username, first_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –±–∏–∑–Ω–µ—Å—ã
    player = db.get_player(user_id)
    businesses = db.get_player_businesses(user_id)
    
    if not businesses:
        # –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –±–∏–∑–Ω–µ—Å
        await state.set_state(GameStates.choosing_business)
        await message.answer(
            f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ë–∏–∑–Ω–µ—Å-–ò–º–ø–µ—Ä–∏—é*!\n\n"
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–π –ø—É—Ç—å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è.\n"
            f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: {player['balance']:,.0f} ‚ÇΩ\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞:",
            reply_markup=get_business_choice_keyboard(),
            parse_mode="Markdown"
        )
    else:
        # –£ –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(GameStates.main_menu)
        await show_main_menu(message, user_id)

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üéÆ *–ë–∏–∑–Ω–µ—Å-–ò–º–ø–µ—Ä–∏—è - –ü–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/businesses - –í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã
/rating - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
/achievements - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è

*–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
2. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏
3. –£–ª—É—á—à–∞–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
4. –ö–æ–Ω–∫—É—Ä–∏—Ä—É–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏
5. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∏–º–ø–µ—Ä–∏—é

*–¢–∏–ø—ã –±–∏–∑–Ω–µ—Å–∞:*
‚òï –ö–æ—Ñ–µ–π–Ω—è - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω - —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥, —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
üè≠ –§–∞–±—Ä–∏–∫–∞ - –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
üíª IT-—Å—Ç–∞—Ä—Ç–∞–ø - –æ–≥—Ä–æ–º–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
üöú –§–µ—Ä–º–∞ - —Å–∫—Ä–æ–º–Ω—ã–π –¥–æ—Ö–æ–¥, –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫

*–£–ª—É—á—à–µ–Ω–∏—è:*
üõ† –ù–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - +20% –∫ –¥–æ—Ö–æ–¥—É
üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ - +15% –∫ –¥–æ—Ö–æ–¥—É, +10% –∫ —Ä–∞—Å—Ö–æ–¥–∞–º
üì¢ –†–µ–∫–ª–∞–º–∞ - +30% –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
üè¢ –§–∏–ª–∏–∞–ª - +50% –∫ –¥–æ—Ö–æ–¥—É, +30% –∫ —Ä–∞—Å—Ö–æ–¥–∞–º

*–°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:*
üé≤ –ü—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã –∏–ª–∏ —à—Ç—Ä–∞—Ñ—ã

–£–¥–∞—á–∏ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–∏–º–ø–µ—Ä–∏–∏! üöÄ
"""
    await message.answer(help_text, parse_mode="Markdown")

@router.message(Command("admin"))
async def cmd_admin(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="üë• –ò–≥—Ä–æ–∫–∏", callback_data="admin_players"))
    kb.add(InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_set_balance"))
    kb.add(InlineKeyboardButton(text="‚≠ê –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç", callback_data="admin_grant_xp"))
    kb.add(InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞", callback_data="admin_delete_player"))
    kb.add(InlineKeyboardButton(text="üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏/–ö—Ä–µ–¥–∏—Ç—ã", callback_data="admin_finance"))
    kb.add(InlineKeyboardButton(text="‚öîÔ∏è PvP", callback_data="admin_pvp"))
    kb.adjust(2,2,2)
    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("admin_"))
async def admin_router(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    action = callback.data
    if action == "admin_players":
        players = db.admin_list_players(20)
        text = "üë• –ò–≥—Ä–æ–∫–∏ (—Ç–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É):\n\n"
        for p in players:
            name = p['first_name'] or p['username'] or str(p['user_id'])
            text += f"{name} ‚Äî {p['balance']:,.0f} ‚ÇΩ | —É—Ä.{p['level']} | xp {p['experience']:,} (id:{p['user_id']})\n"
        await callback.message.edit_text(text)
    elif action == "admin_set_balance":
        await state.set_state(GameStates.business_name)
        await state.update_data(action="admin_set_balance")
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ: user_id –Ω–æ–≤—ã–π_–±–∞–ª–∞–Ω—Å")
    elif action == "admin_grant_xp":
        await state.set_state(GameStates.business_name)
        await state.update_data(action="admin_grant_xp")
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ: user_id xp")
    elif action == "admin_delete_player":
        await state.set_state(GameStates.business_name)
        await state.update_data(action="admin_delete_player")
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ: user_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    elif action == "admin_finance":
        await callback.message.edit_text("–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    elif action == "admin_pvp":
        top = db.get_pvp_top(10)
        text = "‚öîÔ∏è –¢–æ–ø PvP:\n\n"
        for row in top:
            nm = row['first_name'] or row['username']
            text += f"{row['rank']}. {nm} ‚Äî {row['rating']:.0f} (W:{row['wins']}/L:{row['losses']})\n"
        await callback.message.edit_text(text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data.startswith("business_"))
async def process_business_choice(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±–∏–∑–Ω–µ—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ 'business_' —Ü–µ–ª–∏–∫–æ–º (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å '_')
    business_type = callback.data[len("business_"):]
    business_info = BUSINESS_TYPES[business_type]
    
    await state.set_state(GameStates.business_name)
    await state.update_data(business_type=business_type)
    
    await callback.message.edit_text(
        f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: {business_info['emoji']} *{business_info['name']}*\n\n"
        f"üìù {business_info['description']}\n"
        f"üí∞ –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥: {business_info['base_income']:,} ‚ÇΩ/–¥–µ–Ω—å\n"
        f"üí∏ –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {business_info['base_expenses']:,} ‚ÇΩ/–¥–µ–Ω—å\n"
        f"üìà –°–∫–æ—Ä–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: {business_info['growth_rate']}x\n"
        f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {business_info['risk_level']}\n\n"
        f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞:",
        parse_mode="Markdown"
    )

@router.message(GameStates.business_name)
async def process_business_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"""
    business_name = message.text.strip()
    if len(business_name) < 2:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    data = await state.get_data()
    business_type = data['business_type']
    business_info = BUSINESS_TYPES[business_type]
    
    user_id = message.from_user.id
    player = db.get_player(user_id)
    
    existing = db.get_player_businesses(user_id)
    if len(existing) >= 2:
        await message.answer("–õ–∏–º–∏—Ç: —É –≤–∞—Å —É–∂–µ 2 –±–∏–∑–Ω–µ—Å–∞.", reply_markup=get_main_menu_keyboard())
        await state.set_state(GameStates.main_menu)
        return
    # –°–æ–∑–¥–∞–µ–º –±–∏–∑–Ω–µ—Å
    business_id = db.add_business(
        user_id, 
        business_type, 
        business_name, 
        business_info['base_income'], 
        business_info['base_expenses']
    )
    
    if business_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞ (–≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞)
        startup_cost = business_info['base_expenses'] * 10  # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞
        db.update_player_balance(user_id, -startup_cost, "business_startup", f"–ó–∞–ø—É—Å–∫ –±–∏–∑–Ω–µ—Å–∞ '{business_name}'")
        
        await state.set_state(GameStates.main_menu)
        await message.answer(
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–∏–∑–Ω–µ—Å *{business_name}* —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞: {startup_cost:,.0f} ‚ÇΩ\n"
            f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {(player['balance'] - startup_cost):,.0f} ‚ÇΩ\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –±–∏–∑–Ω–µ—Å–æ–º!",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data == "profile")
async def show_profile(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"""
    user_id = callback.from_user.id
    player = db.get_player(user_id)
    businesses = db.get_player_businesses(user_id)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    daily_progress = game_logic.calculate_daily_progress(player, businesses)
    
    profile_text = f"""
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*

üí∞ –ë–∞–ª–∞–Ω—Å: {player['balance']:,.0f} ‚ÇΩ
‚≠ê –£—Ä–æ–≤–µ–Ω—å: {player['level']}
üìä –û–ø—ã—Ç: {player['experience']:,} / {game_logic.calculate_level_up_experience(player['level']):,}
üìà –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å: {int(player['popularity'] * 100)}%

üè¢ *–ë–∏–∑–Ω–µ—Å—ã: {len(businesses)}*
üìà –û–±—â–∏–π –¥–æ—Ö–æ–¥: {daily_progress['total_income']:,.0f} ‚ÇΩ/–¥–µ–Ω—å
üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {daily_progress['total_expenses']:,.0f} ‚ÇΩ/–¥–µ–Ω—å
üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {daily_progress['net_income']:,.0f} ‚ÇΩ/–¥–µ–Ω—å

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {player['created_at'][:10]}
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {player['last_active'][:16]}
"""
    
    await callback.message.edit_text(profile_text, reply_markup=get_main_menu_keyboard(user_id), parse_mode="Markdown")

@router.callback_query(F.data == "businesses")
async def show_businesses(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤ –∏–≥—Ä–æ–∫–∞"""
    user_id = callback.from_user.id
    businesses = db.get_player_businesses(user_id)
    
    if not businesses:
        await callback.message.edit_text(
            "üè¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤.\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞!",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    businesses_text = "üè¢ *–í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã:*\n\n"
    keyboard = InlineKeyboardBuilder()
    
    for business in businesses:
        business_info = BUSINESS_TYPES[business['business_type']]
        daily_income = game_logic.calculate_daily_income(business, business['improvements'])
        daily_expenses = game_logic.calculate_daily_expenses(business, business['improvements'])
        net_income = daily_income - daily_expenses
        
        businesses_text += (
            f"{business_info['emoji']} *{business['name']}*\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {business['level']}\n"
            f"üí∞ –î–æ—Ö–æ–¥: {daily_income:,.0f} ‚ÇΩ/–¥–µ–Ω—å\n"
            f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {daily_expenses:,.0f} ‚ÇΩ/–¥–µ–Ω—å\n"
            f"üíµ –ü—Ä–∏–±—ã–ª—å: {net_income:,.0f} ‚ÇΩ/–¥–µ–Ω—å\n"
            f"üõ† –£–ª—É—á—à–µ–Ω–∏—è: {len(business['improvements'])}\n\n"
        )
        
        keyboard.add(InlineKeyboardButton(
            text=f"–£–ø—Ä–∞–≤–ª—è—Ç—å {business['name']}", 
            callback_data=f"manage_{business['id']}"
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 2)
    if len(businesses) < 2:
        keyboard.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–π –±–∏–∑–Ω–µ—Å", callback_data="add_business"))
    keyboard.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    keyboard.adjust(1)
    
    await callback.message.edit_text(businesses_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@router.callback_query(F.data == "improvements")
async def improvements_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏–π –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å –±–∏–∑–Ω–µ—Å"""
    user_id = callback.from_user.id
    businesses = db.get_player_businesses(user_id)
    if not businesses:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π")
        return
    text = "üõ† –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π:\n\n"
    keyboard = InlineKeyboardBuilder()
    for business in businesses:
        text += f"- {business['name']} (—É–ª—É—á—à–µ–Ω–∏–π: {len(business['improvements'])})\n"
        keyboard.add(InlineKeyboardButton(text=f"–£–ª—É—á—à–∏—Ç—å {business['name']}", callback_data=f"improve_{business['id']}"))
    keyboard.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    keyboard.adjust(1)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())

# ---------------- –ö—Ä–µ–¥–∏—Ç—ã ----------------
@router.callback_query(F.data == "loans")
async def loans_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    player = db.get_player(user_id)
    loans = db.get_active_loans(user_id)
    text = "üè¶ –ö—Ä–µ–¥–∏—Ç—ã\n\n"
    if loans:
        for l in loans:
            text += (f"#{l['id']}: –û—Å—Ç–∞—Ç–æ–∫ {l['remaining']:,.0f} ‚ÇΩ | –°—Ç–∞–≤–∫–∞ {l['interest_rate']*100:.1f}%/–¥ | "+
                     f"–î–æ {l['due_date'][:10]}\n")
    else:
        text += "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ—Ç\n"
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–í–∑—è—Ç—å 50 000 ‚ÇΩ –Ω–∞ 7 –¥–Ω–µ–π", callback_data="loan_take_50000_7"))
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–≥–∞—à–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –∫—Ä–µ–¥–∏—Ç—É
    for l in loans:
        keyboard.add(InlineKeyboardButton(text=f"–ü–æ–≥–∞—Å–∏—Ç—å 10 000 ‚ÇΩ –ø–æ #{l['id']}", callback_data=f"loan_repay_{l['id']}_10000"))
    keyboard.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    keyboard.adjust(1)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("loan_take_"))
async def take_preset_loan(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_")  # loan_take_50000_7
    amount = float(parts[2])
    term = int(parts[3])
    eligibility = advanced.calculate_loan_eligibility(db.get_player(user_id), amount)
    if not eligibility['eligible']:
        await callback.answer(eligibility.get('reason', '–ö—Ä–µ–¥–∏—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω'), show_alert=True)
        return
    loan = advanced.process_loan(db.get_player(user_id), amount, term)
    if not loan['success']:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∫—Ä–µ–¥–∏—Ç", show_alert=True)
        return
    info = loan['loan_info']
    from datetime import datetime
    loan_id = db.create_loan(user_id, amount, info['interest_rate'], term,
                             info['issued_at'].strftime('%Y-%m-%d %H:%M:%S'),
                             info['due_date'].strftime('%Y-%m-%d %H:%M:%S'))
    if loan_id:
        db.update_player_balance(user_id, amount, "loan", f"–ö—Ä–µ–¥–∏—Ç #{loan_id}")
        await callback.message.edit_text(
            f"‚úÖ –ö—Ä–µ–¥–∏—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω! ID {loan_id}\n–°—É–º–º–∞: {amount:,.0f} ‚ÇΩ\n–°—Ç–∞–≤–∫–∞: {info['interest_rate']*100:.1f}%/–¥\n–°—Ä–æ–∫: {term} –¥–Ω.",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞", show_alert=True)

@router.callback_query(F.data.startswith("loan_repay_"))
async def loan_repay_quick(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    _, _, loan_id_str, amount_str = callback.data.split("_")
    loan_id = int(loan_id_str); amount = float(amount_str)
    loan = db.get_loan_by_id(user_id, loan_id)
    if not loan:
        await callback.answer("–ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    if amount > loan['remaining']:
        amount = loan['remaining']
    if db.repay_loan(user_id, loan_id, amount):
        db.update_player_balance(user_id, -amount, "loan_repay", f"–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ #{loan_id}")
        await loans_menu(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è", show_alert=True)

@router.message(GameStates.business_name)
async def handle_text_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    action = data.get('action')
    # --- –∞–¥–º–∏–Ω –æ–ø–µ—Ä–∞—Ü–∏–∏ ---
    if action == 'admin_set_balance':
        try:
            uid_str, bal_str = message.text.strip().split()
            uid = int(uid_str); bal = float(bal_str)
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789 100000")
            return
        ok = db.admin_set_balance(uid, bal)
        await message.answer("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω" if ok else "‚ùå –û—à–∏–±–∫–∞", reply_markup=get_main_menu_keyboard())
        await state.clear(); return
    if action == 'admin_grant_xp':
        try:
            uid_str, xp_str = message.text.strip().split()
            uid = int(uid_str); xp = int(xp_str)
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789 5000")
            return
        ok = db.admin_grant_experience(uid, xp)
        await message.answer("‚úÖ –û–ø—ã—Ç –¥–æ–±–∞–≤–ª–µ–Ω" if ok else "‚ùå –û—à–∏–±–∫–∞", reply_markup=get_main_menu_keyboard())
        await state.clear(); return
    if action == 'admin_delete_player':
        try:
            uid = int(message.text.strip())
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 123456789")
            return
        ok = db.admin_delete_player(uid)
        await message.answer("‚úÖ –ò–≥—Ä–æ–∫ —É–¥–∞–ª–µ–Ω" if ok else "‚ùå –û—à–∏–±–∫–∞", reply_markup=get_main_menu_keyboard())
        await state.clear(); return
    if action == 'repay_loan':
        try:
            loan_id_str, amount_str = message.text.strip().split()
            loan_id = int(loan_id_str)
            amount = float(amount_str)
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1 10000")
            return
        user_id = message.from_user.id
        if db.repay_loan(user_id, loan_id, amount):
            db.update_player_balance(user_id, -amount, "loan_repay", f"–ü–æ–≥–∞—à–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞ #{loan_id}")
            await message.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø—Ä–∏–Ω—è—Ç", reply_markup=get_main_menu_keyboard())
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return
    if action == 'claim_investment':
        try:
            inv_id = int(message.text.strip())
        except Exception:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1")
            return
        user_id = message.from_user.id
        amount = db.claim_investment(user_id, inv_id)
        if amount is None:
            await message.answer("‚ùå –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        else:
            db.update_player_balance(user_id, amount, "investment_income", f"–î–æ—Ö–æ–¥ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #{inv_id}")
            await message.answer(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {amount:,.0f} ‚ÇΩ", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return
    # –∏–Ω–∞—á–µ —ç—Ç–æ –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ –∏–∑ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ‚Äî –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await process_business_name(message, state)

# ---------------- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ----------------
@router.callback_query(F.data == "investments")
async def investments_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    # –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å—ã –∏ —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
    db.mark_matured_investments()
    try:
        db.update_investment_prices()
    except Exception:
        pass
    inv = db.get_investments(user_id)
    text = "üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n\n"
    if inv:
        for i in inv:
            current_val = i.get('current_value', i['amount'])
            text += (f"#{i['id']}: –≤–ª–æ–∂–µ–Ω–æ {i['amount']:,.0f} ‚ÇΩ | —Ç–µ–∫—É—â–∞—è {current_val:,.0f} ‚ÇΩ | "+
                     f"—Å—Ç–∞—Ç—É—Å {i['status']} –¥–æ {i['matures_at'][:10]}\n")
    else:
        text += "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–µ—Ç\n"
    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="–í–ª–æ–∂–∏—Ç—å 20 000 ‚ÇΩ (—Å–±–∞–ª–∞–Ω—Å.)", callback_data="inv_take_balanced_20000"))
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞
    for i in inv:
        if i['status'] == 'matured':
            keyboard.add(InlineKeyboardButton(text=f"–ó–∞–±—Ä–∞—Ç—å –ø–æ #{i['id']}", callback_data=f"inv_claim_{i['id']}"))
        if i['status'] in ('active','matured'):
            keyboard.add(InlineKeyboardButton(text=f"–í—ã–≤–µ—Å—Ç–∏ –ø–æ #{i['id']}", callback_data=f"inv_withdraw_{i['id']}"))
    keyboard.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    keyboard.adjust(1)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())

@router.callback_query(F.data.startswith("inv_take_"))
async def take_investment(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_")  # inv_take_balanced_20000
    strategy = parts[2]
    amount = float(parts[3])
    player = db.get_player(user_id)
    if amount > player['balance']:
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
        return
    expected = amount * advanced.investment_returns.get(strategy, 0.12)
    from datetime import datetime, timedelta
    matures = (datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d %H:%M:%S')
    inv_id = db.create_investment(user_id, None, strategy, amount, expected, matures)
    if inv_id:
        db.update_player_balance(user_id, -amount, "investment", f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è #{inv_id}")
        await callback.message.edit_text(
            f"‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞! ID {inv_id}\n–°—É–º–º–∞: {amount:,.0f} ‚ÇΩ\n–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: {expected:,.0f} ‚ÇΩ\n–°—Ä–æ–∫: 3 –¥–Ω—è",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        await callback.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", show_alert=True)

@router.callback_query(F.data.startswith("inv_claim_"))
async def inv_claim_quick(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    inv_id = int(callback.data.split("_")[2])
    amount = db.claim_investment(user_id, inv_id)
    if amount is None:
        await callback.answer("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞", show_alert=True)
        return
    db.update_player_balance(user_id, amount, "investment_income", f"–î–æ—Ö–æ–¥ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #{inv_id}")
    await investments_menu(callback)

@router.callback_query(F.data.startswith("inv_withdraw_"))
async def inv_withdraw(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    inv_id = int(callback.data.split("_")[2])
    res = db.withdraw_investment(user_id, inv_id)
    if not res:
        await callback.answer("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    payout, prev_status = res
    if prev_status == 'active':
        msg = f"‚úÖ –î–æ—Å—Ä–æ—á–Ω—ã–π –≤—ã–≤–æ–¥: {payout:,.0f} ‚ÇΩ (—É—á—Ç–µ–Ω —à—Ç—Ä–∞—Ñ 5%)"
    else:
        msg = f"‚úÖ –í—ã–≤–æ–¥: {payout:,.0f} ‚ÇΩ"
    db.update_player_balance(user_id, payout, "investment_withdraw", f"–í—ã–≤–æ–¥ –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ #{inv_id}")
    try:
        db.update_investment_prices()
    except Exception:
        pass
    await callback.answer(msg, show_alert=True)
    await investments_menu(callback)

    

# ---------------- PvP (–∑–∞–≥–ª—É—à–∫–∞-–¥—É—ç–ª—å) ----------------
@router.callback_query(F.data == "pvp")
async def pvp_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    player = db.get_player(user_id)
    db.ensure_pvp_profile(user_id)
    opponents = db.get_top_players(10)
    text = "‚öîÔ∏è PvP –î—É—ç–ª–∏\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Ç–æ–ø–∞ (—Å—Ç–∞–≤–∫–∞ 10 000 ‚ÇΩ, –∫—É–ª–¥–∞—É–Ω 30—Å):\n\n"
    keyboard = InlineKeyboardBuilder()
    for op in opponents:
        if op['user_id'] != user_id:
            name = op['first_name'] or op['username']
            text += f"{name} (—É—Ä. {op['level']} | {op['balance']:,.0f} ‚ÇΩ)\n"
            keyboard.add(InlineKeyboardButton(text=f"–°—Ä–∞–∑–∏—Ç—å—Å—è —Å {name}", callback_data=f"pvp_fight_{op['user_id']}"))
    # –¢–æ–ø –ø–æ PvP —Ä–µ–π—Ç–∏–Ω–≥—É
    pvp_top = db.get_pvp_top(5)
    if pvp_top:
        text += "\n<b>–¢–æ–ø PvP:</b>\n"
        for row in pvp_top:
            nm = row['first_name'] or row['username']
            text += f"{row['rank']}. {nm} ‚Äî {row['rating']:.0f} (W:{row['wins']}/L:{row['losses']})\n"
    keyboard.row(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    keyboard.adjust(1)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@router.callback_query(F.data.startswith("pvp_fight_"))
async def pvp_fight(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    opponent_id = int(callback.data.split("_")[2])
    bet = 10000
    player = db.get_player(user_id)
    opponent = db.get_player(opponent_id)
    if not opponent:
        await callback.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return
    # –û–≥—Ä–∞–Ω–∏—á–∏–º —Å—Ç–∞–≤–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞–º–∏ —Å—Ç–æ—Ä–æ–Ω
    bet = min(bet, max(0, player['balance'] // 2), max(0, opponent['balance'] // 2)) or 1000
    # –ö—É–ª–¥–∞—É–Ω
    db.ensure_pvp_profile(user_id)
    remain = db.pvp_cooldown_remaining(user_id)
    if remain > 0:
        await callback.answer(f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {remain}—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–æ—è", show_alert=True)
        return
    result = advanced.calculate_pvp_outcome(player, opponent, bet)
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –±–æ–π
    db.record_pvp_match(user_id, opponent_id, result['winner']['user_id'] if result['winner'] else None,
                        result['loser']['user_id'] if result['loser'] else None, bet,
                        result['player1_power'], result['player2_power'], result['outcome'])
    if result['outcome'] == 'win':
        db.update_player_balance(user_id, bet, "pvp_win", f"–ü–æ–±–µ–¥–∞ –Ω–∞–¥ {opponent.get('username') or opponent.get('first_name')}")
        db.update_player_balance(opponent_id, -bet, "pvp_loss", f"–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {player.get('username') or player.get('first_name')}")
        db.update_pvp_ratings_after_match(user_id, opponent_id)
        msg = f"üèÜ –ü–æ–±–µ–¥–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bet:,.0f} ‚ÇΩ"
    elif result['outcome'] == 'loss':
        db.update_player_balance(user_id, -bet, "pvp_loss", f"–ü–æ—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {opponent.get('username') or opponent.get('first_name')}")
        db.update_player_balance(opponent_id, bet, "pvp_win", f"–ü–æ–±–µ–¥–∞ –Ω–∞–¥ {player.get('username') or player.get('first_name')}")
        db.update_pvp_ratings_after_match(opponent_id, user_id)
        msg = f"‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {bet:,.0f} ‚ÇΩ"
    else:
        msg = "ü§ù –ù–∏—á—å—è. –°—Ç–∞–≤–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã"
    # –ö—É–ª–¥–∞—É–Ω 30—Å –ø–æ—Å–ª–µ –±–æ—è
    db.set_pvp_cooldown(user_id, 30)
    await callback.message.edit_text(msg, reply_markup=get_main_menu_keyboard())

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await show_main_menu(callback, callback.from_user.id)

@router.callback_query(F.data.startswith("manage_"))
async def manage_business(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –±–∏–∑–Ω–µ—Å–æ–º"""
    business_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    businesses = db.get_player_businesses(user_id)
    business = next((b for b in businesses if b['id'] == business_id), None)
    
    if not business:
        await callback.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    business_info = BUSINESS_TYPES[business['business_type']]
    daily_income = game_logic.calculate_daily_income(business, business['improvements'])
    daily_expenses = game_logic.calculate_daily_expenses(business, business['improvements'])
    net_income = daily_income - daily_expenses
    
    business_text = f"""
üè¢ *{business['name']}*

üìä –¢–∏–ø: {business_info['emoji']} {business_info['name']}
‚≠ê –£—Ä–æ–≤–µ–Ω—å: {business['level']}
üí∞ –î–æ—Ö–æ–¥: {daily_income:,.0f} ‚ÇΩ/–¥–µ–Ω—å
üí∏ –†–∞—Å—Ö–æ–¥—ã: {daily_expenses:,.0f} ‚ÇΩ/–¥–µ–Ω—å
üíµ –ü—Ä–∏–±—ã–ª—å: {net_income:,.0f} ‚ÇΩ/–¥–µ–Ω—å
üõ† –£–ª—É—á—à–µ–Ω–∏—è: {len(business['improvements'])}

üìà *–ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:*
"""
    
    if business['improvements']:
        for improvement in business['improvements']:
            if improvement in IMPROVEMENTS:
                business_text += f"‚úÖ {IMPROVEMENTS[improvement]['name']}\n"
    else:
        business_text += "–ù–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π\n"
    
    await callback.message.edit_text(
        business_text, 
        reply_markup=get_business_management_keyboard(business_id),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("prod_menu_"))
async def prod_menu(callback: types.CallbackQuery):
    business_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    businesses = db.get_player_businesses(user_id)
    business = next((b for b in businesses if b['id'] == business_id), None)
    if not business:
        await callback.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True); return
    prods = db.get_business_productions(business_id)
    text = f"üì¶ –ü—Ä–æ–¥—É–∫—Ü–∏—è {business['name']}\n\n"
    if prods:
        for p in prods:
            ready = p['ready_at'][:16]
            status = p['status']
            line = f"#{p['id']} {p['name']} v{p['version']} ‚Äî {p['prod_type']} | {status} –¥–æ {ready}"
            text += line + "\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏\n"
    kb = InlineKeyboardBuilder()
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ —Ç–∏–ø—É
    btype = business['business_type']
    if btype == 'it_startup':
        kb.add(InlineKeyboardButton(text="–°–æ–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data=f"prod_start_{business_id}_it_app"))
        kb.add(InlineKeyboardButton(text="–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data=f"prod_start_{business_id}_it_erp"))
    elif btype == 'farm':
        kb.add(InlineKeyboardButton(text="–ü–æ—Å–µ—è—Ç—å –∫—É–ª—å—Ç—É—Ä—ã", callback_data=f"prod_start_{business_id}_farm_crops"))
        kb.add(InlineKeyboardButton(text="–°–±–æ—Ä —É—Ä–æ–∂–∞—è", callback_data=f"prod_start_{business_id}_farm_harvest"))
    elif btype == 'factory':
        kb.add(InlineKeyboardButton(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data=f"prod_start_{business_id}_factory_product"))
    # –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    for p in prods:
        if p['status'] != 'collected':
            kb.add(InlineKeyboardButton(text=f"–ó–∞–±—Ä–∞—Ç—å #{p['id']}", callback_data=f"prod_collect_{p['id']}"))
    kb.row(InlineKeyboardButton(text="üîô –ö –±–∏–∑–Ω–µ—Å—É", callback_data=f"manage_{business_id}"))
    kb.adjust(1)
    await callback.message.edit_text(text, reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("prod_start_"))
async def prod_start(callback: types.CallbackQuery):
    parts = callback.data.split("_")  # prod_start_{business_id}_{code}
    business_id = int(parts[2])
    code = "_".join(parts[3:])
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–æ–¥—É
    from datetime import datetime, timedelta
    if code == 'it_app':
        name, prod_type, dur_min, qty, version = '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'IT', 30, 1, 1
    elif code == 'it_erp':
        name, prod_type, dur_min, qty, version = 'ERP —Å–∏—Å—Ç–µ–º–∞', 'IT', 60, 1, 1
    elif code == 'farm_crops':
        name, prod_type, dur_min, qty, version = '–ü–æ—Å–µ–≤', 'FARM', 45, 100, 1
    elif code == 'farm_harvest':
        name, prod_type, dur_min, qty, version = '–£—Ä–æ–∂–∞–π', 'FARM', 60, 200, 1
    elif code == 'factory_product':
        name, prod_type, dur_min, qty, version = '–ü—Ä–æ–¥—É–∫—Ç', 'FACTORY', 40, 50, 1
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ", show_alert=True); return
    ready_at = (datetime.now() + timedelta(minutes=dur_min)).strftime('%Y-%m-%d %H:%M:%S')
    prod_id = db.create_production(business_id, prod_type, name, version, ready_at, qty, meta={})
    if prod_id:
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        await prod_menu(callback)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("prod_collect_"))
async def prod_collect(callback: types.CallbackQuery):
    prod_id = int(callback.data.split("_")[2])
    info = db.collect_production(prod_id, callback.from_user.id)
    if not info:
        await callback.answer("–ù–µ –≥–æ—Ç–æ–≤–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True); return
    # –ù–∞–≥—Ä–∞–¥–∞: –¥–µ–Ω–µ–≥ –∑–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—é (–ø—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞)
    base = 0
    if info['prod_type'] == 'IT':
        base = 20000
    elif info['prod_type'] == 'FARM':
        base = info['quantity'] * 50
    elif info['prod_type'] == 'FACTORY':
        base = info['quantity'] * 120
          # –°–ª—É—á–∞–π–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: –ª–æ–≥–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –æ–±—Ä–µ–∑–∫–æ–π –∏ —à–∞–Ω—Å–æ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    import random, math
    # 10% —à–∞–Ω—Å –ø—Ä–æ–≤–∞–ª–∞: —É–±—ã—Ç–æ–∫ 20-80% –æ—Ç –±–∞–∑—ã
    if random.random() < 0.10:
        factor = -random.uniform(0.2, 0.8)
    else:
        # –£—Å–ø–µ—Ö: –º–µ–¥–∏–∞–Ω–∞ –æ–∫–æ–ª–æ 1.0, —Ö–≤–æ—Å—Ç—ã –¥–æ 5-10x —Ä–µ–¥–∫–æ
        factor = min(10.0, max(0.2, random.lognormvariate(0.0, 0.6)))
    reward = float(base) * factor
    # –£–∑–Ω–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–∏–∑–Ω–µ—Å–∞
    # –£–ø—Ä–æ—Å—Ç–∏–º: –ø–æ prod_id -> business_id —É–∂–µ –µ—Å—Ç—å –≤ info
    # –ù–∞–π–¥–µ–º –±–∏–∑–Ω–µ—Å
    # –î–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω—É–∂–µ–Ω user_id –≤–ª–∞–¥–µ–ª—å—Ü–∞
    # –ü–æ–ª—É—á–∏–º —á–µ—Ä–µ–∑ businesses
    # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ: –ø—Ä–æ—á–∏—Ç–∞–µ–º –±–∏–∑–Ω–µ—Å –∏ –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    # (–±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω; –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å)
    reward = float(reward)
    # –ù–∞–π–¥–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —á–µ—Ä–µ–∑ –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã –∏–≥—Ä–æ–∫–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    user_id = callback.from_user.id
    db.update_player_balance(user_id, reward, 'production', f"–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–¥—É–∫—Ü–∏–∏: {info['name']}")
    prefix = "+" if reward >= 0 else "-"
    amount_str = f"{abs(reward):,.0f} ‚ÇΩ"
    await callback.message.edit_text(f"üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–¥—É–∫—Ü–∏–∏: {prefix}{amount_str}", reply_markup=get_main_menu_keyboard())
    

@router.callback_query(F.data.startswith("stats_"))
async def show_stats(callback: types.CallbackQuery):
    business_id = int(callback.data.split("_")[1])
    await callback.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data.startswith("sell_"))
async def sell_business(callback: types.CallbackQuery):
    business_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    businesses = db.get_player_businesses(user_id)
    business = next((b for b in businesses if b['id'] == business_id), None)
        
    if not business:
         await callback.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
         return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂–∏
    base_value = business['income'] * 10
    improvements_value = 0
        
    for improvement in business['improvements']:
        if improvement in IMPROVEMENTS:
            improvements_value += IMPROVEMENTS[improvement]['cost'] * 0.7
        
        level_bonus = (business['level'] - 1) * 1000
        estimated_value = base_value + improvements_value + level_bonus
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardBuilder()
        keyboard.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data=f"confirm_sell_{business_id}"))
        keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"manage_{business_id}"))
        keyboard.adjust(1)
        
        await callback.message.edit_text(
            f"üí∞ *–ü—Ä–æ–¥–∞–∂–∞ –±–∏–∑–Ω–µ—Å–∞*\n\n"
            f"üè¢ {business['name']}\n"
            f"üìä –£—Ä–æ–≤–µ–Ω—å: {business['level']}\n"
            f"üíµ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥: {business['income']:,.0f} ‚ÇΩ\n"
            f"üí∏ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {business['expenses']:,.0f} ‚ÇΩ\n"
            f"üõ† –£–ª—É—á—à–µ–Ω–∏–π: {len(business['improvements'])}\n\n"
            f"üí∞ *–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {estimated_value:,.0f} ‚ÇΩ*\n\n"
            f"‚ö†Ô∏è –ü–æ—Å–ª–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞!",
            reply_markup=keyboard.as_markup(),
            parse_mode="Markdown"
        )

    @router.callback_query(F.data.startswith("confirm_sell_"))
    async def confirm_sell_business(callback: types.CallbackQuery):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –±–∏–∑–Ω–µ—Å–∞"""
        business_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        
        result = db.sell_business(user_id, business_id)
        
        if result['success']:
            await callback.message.edit_text(
                f"‚úÖ *–ë–∏–∑–Ω–µ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω!*\n\n"
                f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {result['sale_price']:,.0f} ‚ÇΩ\n\n"
                f"–î–µ–Ω—å–≥–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
                reply_markup=get_main_menu_keyboard(user_id),
                parse_mode="Markdown"
            )
        else:
            await callback.answer(result['message'], show_alert=True)

@router.callback_query(F.data.startswith("improve_"))
async def show_improvements(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è"""
    business_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    player = db.get_player(user_id)
    businesses = db.get_player_businesses(user_id)
    business = next((b for b in businesses if b['id'] == business_id), None)
    
    if not business:
        await callback.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    improvements_text = f"""
üõ† *–£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è {business['name']}*

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {player['balance']:,.0f} ‚ÇΩ
üìä –¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥: {business['income']:,.0f} ‚ÇΩ/–¥–µ–Ω—å
üí∏ –¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {business['expenses']:,.0f} ‚ÇΩ/–¥–µ–Ω—å

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:*
"""
    
    for improvement_id, improvement_info in IMPROVEMENTS.items():
        can_afford = game_logic.can_afford_improvement(player['balance'], improvement_id)
        already_applied = improvement_id in business['improvements']
        
        status = "‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ" if already_applied else "üí∞ –î–æ—Å—Ç—É–ø–Ω–æ" if can_afford else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        improvements_text += f"\n{improvement_info['name']} ({improvement_info['cost']:,} ‚ÇΩ)\n"
        improvements_text += f"üìù {improvement_info['description']}\n"
        improvements_text += f"üîß –°—Ç–∞—Ç—É—Å: {status}\n"
    
    await callback.message.edit_text(
        improvements_text,
        reply_markup=get_improvements_keyboard(business_id, player['balance']),
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("buy_improvement_"))
async def buy_improvement(callback: types.CallbackQuery):
    """–ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è"""
    parts = callback.data.split("_")
    business_id = int(parts[2])
    improvement_id = parts[3]
    user_id = callback.from_user.id
    
    player = db.get_player(user_id)
    businesses = db.get_player_businesses(user_id)
    business = next((b for b in businesses if b['id'] == business_id), None)
    
    if not business:
        await callback.answer("–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if improvement_id in business['improvements']:
        await callback.answer("–≠—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!")
        return
    
    if not game_logic.can_afford_improvement(player['balance'], improvement_id):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
    result = game_logic.apply_improvement(business, improvement_id)
    
    if result['success']:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–∑–Ω–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_business(
            business_id,
            income=result['new_income'],
            expenses=result['new_expenses'],
            improvements=result['new_improvements']
        )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è
        db.update_player_balance(user_id, -result['cost'], "improvement", f"–£–ª—É—á—à–µ–Ω–∏–µ {IMPROVEMENTS[improvement_id]['name']}")
        
        await callback.message.edit_text(
            f"‚úÖ {result['message']}\n\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {result['cost']:,.0f} ‚ÇΩ\n"
            f"üìà –ù–æ–≤—ã–π –¥–æ—Ö–æ–¥: {result['new_income']:,.0f} ‚ÇΩ/–¥–µ–Ω—å\n"
            f"üí∏ –ù–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {result['new_expenses']:,.0f} ‚ÇΩ/–¥–µ–Ω—å",
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        await callback.answer(result['message'])

@router.callback_query(F.data == "rating")
async def show_rating(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤"""
    top_players = db.get_top_players(10)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏–º–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –±–∏–∑–Ω–µ—Å –∏ —Ç–∏–ø
    rating_text = "<b>üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–∞–ø–∏—Ç–∞–ª—É:</b>\n\n"
    for p in top_players:
        medal = "ü•á" if p['rank'] == 1 else "ü•à" if p['rank'] == 2 else "ü•â" if p['rank'] == 3 else f"{p['rank']}."
        username_raw = p['first_name'] or p['username'] or "–ò–≥—Ä–æ–∫"
        username = html.escape(username_raw)
        # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π –±–∏–∑–Ω–µ—Å –ø–æ –¥–æ—Ö–æ–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        businesses = db.get_player_businesses(p['user_id'])
        biz_part = ""
        if businesses:
            best = max(businesses, key=lambda b: b.get('income', 0) or 0)
            b_type = BUSINESS_TYPES.get(best['business_type'], {'emoji': 'üè¢', 'name': '–ë–∏–∑–Ω–µ—Å'})
            b_name = html.escape(best['name'])
            biz_part = f"\n{b_type['emoji']} {b_name} ‚Äî {b_type['name']}"
        rating_text += f"{medal} {username}{biz_part}\n"
        rating_text += f"üí∞ {p['balance']:,.0f} ‚ÇΩ | ‚≠ê –£—Ä–æ–≤–µ–Ω—å {p['level']}\n\n"

    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    await callback.message.edit_text(rating_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@router.callback_query(F.data == "achievements")
async def show_achievements(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
    user_id = callback.from_user.id
    player = db.get_player(user_id)
    businesses = db.get_player_businesses(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    achievements = game_logic.check_achievements(player, businesses)
    earned_achievements = db.get_player_achievements(user_id)
    
    achievements_text = "üéØ *–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n"
    
    if achievements:
        achievements_text += "*–ù–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n"
        for achievement in achievements:
            achievements_text += f"üèÜ {achievement['title']}\n"
            achievements_text += f"üìù {achievement['description']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add_achievement(user_id, achievement['type'], achievement['title'], achievement['description'])
    
    if earned_achievements:
        achievements_text += "*–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n"
        for achievement in earned_achievements:
            achievements_text += f"‚úÖ {achievement['title']}\n"
            achievements_text += f"üìù {achievement['description']}\n"
            achievements_text += f"üìÖ {achievement['earned_at'][:10]}\n\n"
    
    if not achievements and not earned_achievements:
        achievements_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å!"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text(achievements_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

@router.callback_query(F.data == "random_event")
async def trigger_random_event(callback: types.CallbackQuery):
    """–ó–∞–ø—É—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    user_id = callback.from_user.id
     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    cooldown_remaining = db.get_cooldown_remaining(user_id, "random_event")
    if cooldown_remaining > 0:
        minutes = cooldown_remaining // 60
        seconds = cooldown_remaining % 60
        await callback.answer(
            f"‚è∞ –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ {minutes}–º {seconds}—Å", 
            show_alert=True
        )
        return
    player = db.get_player(user_id)
    businesses = db.get_player_businesses(user_id)
    
    if not businesses:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —Å–æ–±—ã—Ç–∏–π!")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∏–∑–Ω–µ—Å
    business = random.choice(businesses)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    event = game_logic.get_random_event(player['level'])
    
    if event:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        result = game_logic.apply_random_event(player, business, event)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
        if result['income_change'] != 0:
            db.update_player_balance(user_id, result['income_change'], "random_event", event['title'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        if result['popularity_change'] != 0:
            db.update_player_popularity(user_id, result['popularity_change'])
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç
        db.set_cooldown(user_id, "random_event", 30)
        await callback.message.edit_text(
            f"üé≤ *–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ!*\n\n{result['message']}\n\n"
            f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode="Markdown"
        )
    else:
         # –î–∞–∂–µ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —Å—Ç–∞–≤–∏–º –∫—É–ª–¥–∞—É–Ω
        db.set_cooldown(user_id, "random_event", 30)
        await callback.message.edit_text(
            "üé≤ *–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ*\n\n"
            "–°–µ–≥–æ–¥–Ω—è –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–æ –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞—á–∞!\n\n"
            "‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç",
            reply_markup=get_main_menu_keyboard(user_id),
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "daily_income")
async def collect_daily_income(callback: types.CallbackQuery):
    """–°–±–æ—Ä –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞"""
    user_id = callback.from_user.id
    player = db.get_player(user_id)
    businesses = db.get_player_businesses(user_id)
    
    if not businesses:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞!")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    daily_progress = game_logic.calculate_daily_progress(player, businesses)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    db.update_player_balance(user_id, daily_progress['net_income'], "daily_income", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—ã—Ç –∏, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –ø–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
    new_exp = db.add_experience(user_id, daily_progress['experience_gained'])
    if new_exp is not None:
        # –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å
        player = db.get_player(user_id)
        if game_logic.can_level_up(player['experience'], player['level']):
            level_up_result = game_logic.level_up_player(player)
            if level_up_result['success']:
                bonuses = level_up_result['bonuses']
                db.apply_level_up(
                    user_id,
                    level_up_result['new_level'],
                    level_up_result['remaining_experience'],
                    bonuses['balance_bonus'],
                    bonuses['popularity_bonus']
                )
                await callback.message.edit_text(
                    f"üí∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ–ª—É—á–µ–Ω!*\n\n"
                    f"üìà –î–æ—Ö–æ–¥: +{daily_progress['total_income']:,.0f} ‚ÇΩ\n"
                    f"üí∏ –†–∞—Å—Ö–æ–¥—ã: -{daily_progress['total_expenses']:,.0f} ‚ÇΩ\n"
                    f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: +{daily_progress['net_income']:,.0f} ‚ÇΩ\n"
                    f"üìä –û–ø—ã—Ç: +{daily_progress['experience_gained']}\n\n"
                    f"{level_up_result['message']}",
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="Markdown"
                )
                return
    
    await callback.message.edit_text(
        f"üí∞ *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ–ª—É—á–µ–Ω!*\n\n"
        f"üìà –î–æ—Ö–æ–¥: +{daily_progress['total_income']:,.0f} ‚ÇΩ\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã: -{daily_progress['total_expenses']:,.0f} ‚ÇΩ\n"
        f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: +{daily_progress['net_income']:,.0f} ‚ÇΩ\n"
        f"üìä –û–ø—ã—Ç: +{daily_progress['experience_gained']}",
        reply_markup=get_main_menu_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_main_menu(callback, callback.from_user.id)

async def show_main_menu(message_or_callback, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    player = db.get_player(user_id)
    businesses = db.get_player_businesses(user_id)
    
    if not businesses:
        await message_or_callback.answer(
            "üè¢ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤.\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞!",
            reply_markup=get_main_menu_keyboard(user_id)
        )
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    daily_progress = game_logic.calculate_daily_progress(player, businesses)
    
    menu_text = f"""
üéÆ *–ë–∏–∑–Ω–µ—Å-–ò–º–ø–µ—Ä–∏—è*

üí∞ –ë–∞–ª–∞–Ω—Å: {player['balance']:,.0f} ‚ÇΩ
‚≠ê –£—Ä–æ–≤–µ–Ω—å: {player['level']}
üìä –û–ø—ã—Ç: {player['experience']:,} / {game_logic.calculate_level_up_experience(player['level']):,}

üè¢ *–ë–∏–∑–Ω–µ—Å—ã: {len(businesses)}*
üìà –î–æ—Ö–æ–¥: {daily_progress['total_income']:,.0f} ‚ÇΩ/–¥–µ–Ω—å
üí∏ –†–∞—Å—Ö–æ–¥—ã: {daily_progress['total_expenses']:,.0f} ‚ÇΩ/–¥–µ–Ω—å
üíµ –ü—Ä–∏–±—ã–ª—å: {daily_progress['net_income']:,.0f} ‚ÇΩ/–¥–µ–Ω—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(menu_text, reply_markup=get_main_menu_keyboard(user_id), parse_mode="Markdown")
    else:
        await message_or_callback.message.edit_text(menu_text, reply_markup=get_main_menu_keyboard(user_id), parse_mode="Markdown")

@router.callback_query(F.data == "help")
async def show_help(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üéÆ *–ë–∏–∑–Ω–µ—Å-–ò–º–ø–µ—Ä–∏—è - –ü–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å
/businesses - –í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã
/rating - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
/achievements - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è

*–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
2. –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏
3. –£–ª—É—á—à–∞–π—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
4. –ö–æ–Ω–∫—É—Ä–∏—Ä—É–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏
5. –†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∏–º–ø–µ—Ä–∏—é

*–¢–∏–ø—ã –±–∏–∑–Ω–µ—Å–∞:*
‚òï –ö–æ—Ñ–µ–π–Ω—è - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫
üçΩ –†–µ—Å—Ç–æ—Ä–∞–Ω - —Å—Ä–µ–¥–Ω–∏–π –¥–æ—Ö–æ–¥, —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫
üè≠ –§–∞–±—Ä–∏–∫–∞ - –≤—ã—Å–æ–∫–∏–π –¥–æ—Ö–æ–¥, –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
üíª IT-—Å—Ç–∞—Ä—Ç–∞–ø - –æ–≥—Ä–æ–º–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
üöú –§–µ—Ä–º–∞ - —Å–∫—Ä–æ–º–Ω—ã–π –¥–æ—Ö–æ–¥, –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫

*–£–ª—É—á—à–µ–Ω–∏—è:*
üõ† –ù–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - +20% –∫ –¥–æ—Ö–æ–¥—É
üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ - +15% –∫ –¥–æ—Ö–æ–¥—É, +10% –∫ —Ä–∞—Å—Ö–æ–¥–∞–º
üì¢ –†–µ–∫–ª–∞–º–∞ - +30% –∫ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
üè¢ –§–∏–ª–∏–∞–ª - +50% –∫ –¥–æ—Ö–æ–¥—É, +30% –∫ —Ä–∞—Å—Ö–æ–¥–∞–º

*–°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:*
üé≤ –ü—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã –∏–ª–∏ —à—Ç—Ä–∞—Ñ—ã

–£–¥–∞—á–∏ –≤ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–∏–º–ø–µ—Ä–∏–∏! üöÄ
"""
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))
    
    await callback.message.edit_text(help_text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")

# –§–æ–ª–±—ç–∫ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback –¥–∞–Ω–Ω—ã—Ö
@router.callback_query()
async def unknown_callback(callback: types.CallbackQuery):
    logging.info(f"Unhandled callback data: {callback.data}")
    await callback.answer("–ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", show_alert=False)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
dp.include_router(router)

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ë–∏–∑–Ω–µ—Å-–ò–º–ø–µ—Ä–∏—è...")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 
