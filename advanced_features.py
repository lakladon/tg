import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from config import BUSINESS_TYPES

class AdvancedGameFeatures:
    def __init__(self):
        self.loan_rates = {
            'short_term': 0.05,  # 5% –≤ –¥–µ–Ω—å
            'medium_term': 0.03,  # 3% –≤ –¥–µ–Ω—å
            'long_term': 0.02     # 2% –≤ –¥–µ–Ω—å
        }
        
        self.investment_returns = {
            'conservative': 0.08,  # 8% –≤ –¥–µ–Ω—å
            'balanced': 0.12,      # 12% –≤ –¥–µ–Ω—å
            'aggressive': 0.18     # 18% –≤ –¥–µ–Ω—å
        }
        
        self.pvp_rewards = {
            'win': 0.1,      # 10% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            'loss': -0.05,   # -5% –æ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞
            'draw': 0.02     # 2% –æ—Ç —Å—Ç–∞–≤–∫–∏
        }
    
    def calculate_loan_eligibility(self, player: Dict, loan_amount: float) -> Dict:
        """–†–∞—Å—á–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞"""
        credit_score = self._calculate_credit_score(player)
        max_loan = player['balance'] * 2  # –ú–∞–∫—Å–∏–º—É–º 2x –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        
        if loan_amount > max_loan:
            return {
                'eligible': False,
                'reason': f'–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é ({max_loan:,.0f} ‚ÇΩ)',
                'max_amount': max_loan
            }
        
        if credit_score < 500:
            return {
                'eligible': False,
                'reason': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥',
                'credit_score': credit_score
            }
        
        return {
            'eligible': True,
            'credit_score': credit_score,
            'max_amount': max_loan,
            'interest_rate': self._get_interest_rate(credit_score)
        }
    
    def _calculate_credit_score(self, player: Dict) -> int:
        """–†–∞—Å—á–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–∞"""
        score = 300  # –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        
        # –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        score += player['level'] * 50
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—ã—Ç
        score += min(player['experience'] // 1000, 200)
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å
        score += int(player['popularity'] * 100)
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–æ–ª–≥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if player.get('total_expenses', 0) > player.get('total_income', 0):
            score -= 100
        
        return max(score, 100)  # –ú–∏–Ω–∏–º—É–º 100
    
    def _get_interest_rate(self, credit_score: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç—É"""
        if credit_score >= 800:
            return 0.02  # 2% –≤ –¥–µ–Ω—å
        elif credit_score >= 600:
            return 0.03  # 3% –≤ –¥–µ–Ω—å
        elif credit_score >= 400:
            return 0.04  # 4% –≤ –¥–µ–Ω—å
        else:
            return 0.05  # 5% –≤ –¥–µ–Ω—å
    
    def process_loan(self, player: Dict, loan_amount: float, term_days: int) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–∞—á–∏ –∫—Ä–µ–¥–∏—Ç–∞"""
        eligibility = self.calculate_loan_eligibility(player, loan_amount)
        
        if not eligibility['eligible']:
            return {
                'success': False,
                'message': eligibility['reason']
            }
        
        interest_rate = eligibility['interest_rate']
        total_interest = loan_amount * interest_rate * term_days
        total_payment = loan_amount + total_interest
        
        loan_info = {
            'amount': loan_amount,
            'interest_rate': interest_rate,
            'term_days': term_days,
            'total_interest': total_interest,
            'total_payment': total_payment,
            'issued_at': datetime.now(),
            'due_date': datetime.now() + timedelta(days=term_days)
        }
        
        return {
            'success': True,
            'message': f"–ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω! –°—É–º–º–∞: {loan_amount:,.0f} ‚ÇΩ, —Å—Ç–∞–≤–∫–∞: {interest_rate*100:.1f}%/–¥–µ–Ω—å",
            'loan_info': loan_info
        }
    
    def calculate_investment_potential(self, business: Dict, investment_amount: float) -> Dict:
        """–†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –±–∏–∑–Ω–µ—Å"""
        business_info = BUSINESS_TYPES.get(business['business_type'], {})
        
        # –ë–∞–∑–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞
        growth_potential = business_info.get('growth_rate', 1.0)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –æ—Ç —É–ª—É—á—à–µ–Ω–∏–π
        improvement_bonus = 1.0
        if business.get('improvements'):
            improvement_bonus += len(business['improvements']) * 0.1
        
        # –†–∞—Å—á–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        expected_return = growth_potential * improvement_bonus * 0.15  # 15% –±–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥
        
        # –†–∏—Å–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        risk_level = business_info.get('risk_level', 'medium')
        risk_multipliers = {
            'low': 0.8,
            'medium': 1.0,
            'high': 1.3,
            'very_high': 1.6
        }
        risk_multiplier = risk_multipliers.get(risk_level, 1.0)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        final_return = expected_return * risk_multiplier
        
        return {
            'expected_return': final_return,
            'risk_level': risk_level,
            'growth_potential': growth_potential,
            'improvement_bonus': improvement_bonus,
            'recommended_investment': min(investment_amount, business['income'] * 5)
        }
    
    def process_investment(self, investor: Dict, business: Dict, investment_amount: float) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –±–∏–∑–Ω–µ—Å"""
        if investment_amount > investor['balance']:
            return {
                'success': False,
                'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
            }
        
        investment_potential = self.calculate_investment_potential(business, investment_amount)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
        investment = {
            'investor_id': investor['user_id'],
            'business_id': business['id'],
            'amount': investment_amount,
            'expected_return': investment_potential['expected_return'],
            'risk_level': investment_potential['risk_level'],
            'invested_at': datetime.now(),
            'status': 'active'
        }
        
        return {
            'success': True,
            'message': f"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∞! –û–∂–∏–¥–∞–µ–º–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {investment_potential['expected_return']*100:.1f}%",
            'investment': investment,
            'potential': investment_potential
        }
    
    def calculate_pvp_outcome(self, player1: Dict, player2: Dict, bet_amount: float) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ PvP —Å—Ä–∞–∂–µ–Ω–∏—è"""
        # –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∏—Å—Ö–æ–¥
        player1_power = self._calculate_player_power(player1)
        player2_power = self._calculate_player_power(player2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∏ ¬´—É–¥–∞—á—É¬ª
        rand1 = random.uniform(0.85, 1.15)
        rand2 = random.uniform(0.85, 1.15)
        luck1 = random.gauss(0, 0.05)
        luck2 = random.gauss(0, 0.05)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–∏–ª–∞
        final_power1 = player1_power * rand1 * (1 + luck1)
        final_power2 = player2_power * rand2 * (1 + luck2)
        
        # –ü–æ—Ä–æ–≥ –Ω–∏—á—å–µ–π, –µ—Å–ª–∏ —Å–∏–ª—ã –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏
        close_threshold = 0.02 * max(final_power1, final_power2, 1)
        if abs(final_power1 - final_power2) <= close_threshold:
            winner = None
            loser = None
            outcome = 'draw'
        elif final_power1 > final_power2:
            winner = player1
            loser = player2
            outcome = 'win'
        else:
            winner = player2
            loser = player1
            outcome = 'loss'
        
        # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥/—à—Ç—Ä–∞—Ñ–æ–≤
        if outcome == 'win':
            reward = bet_amount * self.pvp_rewards['win']
            penalty = -bet_amount * 0.05
        elif outcome == 'loss':
            reward = -bet_amount * self.pvp_rewards['loss']
            penalty = -bet_amount * 0.1
        else:  # draw
            reward = bet_amount * self.pvp_rewards['draw']
            penalty = 0
        
        return {
            'outcome': outcome,
            'winner': winner,
            'loser': loser,
            'player1_power': player1_power,
            'player2_power': player2_power,
            'final_power1': final_power1,
            'final_power2': final_power2,
            'reward': reward,
            'penalty': penalty,
            'bet_amount': bet_amount
        }
    
    def _calculate_player_power(self, player: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã –∏–≥—Ä–æ–∫–∞ –¥–ª—è PvP"""
        power = 0
        
        # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ –æ—Ç —É—Ä–æ–≤–Ω—è
        power += player['level'] * 100
        
        # –°–∏–ª–∞ –æ—Ç –æ–ø—ã—Ç–∞
        power += player['experience'] * 0.1
        
        # –°–∏–ª–∞ –æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        power += player['popularity'] * 500
        
        # –°–∏–ª–∞ –æ—Ç –±–∞–ª–∞–Ω—Å–∞ (–ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è)
        power += min(player['balance'] / 1000, 1000)
        
        return power
    
    def generate_market_event(self, player_level: int = 1) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        events = [
            {
                'type': 'bull_market',
                'title': '–ë—ã—á–∏–π —Ä—ã–Ω–æ–∫! üìà',
                'description': '–ê–∫—Ü–∏–∏ —Ä–∞—Å—Ç—É—Ç, –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å –∫ –¥–æ—Ö–æ–¥—É',
                'effect': 'income_multiplier',
                'value': 1.5,
                'duration': 3
            },
            {
                'type': 'bear_market',
                'title': '–ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ üìâ',
                'description': '–†—ã–Ω–æ–∫ –ø–∞–¥–∞–µ—Ç, –¥–æ—Ö–æ–¥—ã —Å–Ω–∏–∂–∞—é—Ç—Å—è',
                'effect': 'income_multiplier',
                'value': 0.7,
                'duration': 2
            },
            {
                'type': 'inflation',
                'title': '–ò–Ω—Ñ–ª—è—Ü–∏—è üí∏',
                'description': '–¶–µ–Ω—ã —Ä–∞—Å—Ç—É—Ç, —Ä–∞—Å—Ö–æ–¥—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è',
                'effect': 'expense_multiplier',
                'value': 1.3,
                'duration': 4
            },
            {
                'type': 'economic_boom',
                'title': '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –±—É–º üöÄ',
                'description': '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç, –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞—Å—Ç—É—Ç',
                'effect': 'all_multiplier',
                'value': 1.2,
                'duration': 5
            }
        ]
        
        event = random.choice(events)
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if player_level > 5:
            event['value'] *= 1.1  # –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        
        return event
    
    def calculate_business_synergy(self, business1: Dict, business2: Dict) -> Dict:
        """–†–∞—Å—á–µ—Ç —Å–∏–Ω–µ—Ä–≥–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –±–∏–∑–Ω–µ—Å–∞–º–∏"""
        business_types = [business1['business_type'], business2['business_type']]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—ã
        synergies = {
            ('coffee_shop', 'restaurant'): {
                'name': '–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä',
                'bonus': 0.15,
                'description': '–ö–æ—Ñ–µ–π–Ω—è –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–æ–ø–æ–ª–Ω—è—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞'
            },
            ('farm', 'restaurant'): {
                'name': '–§–µ—Ä–º–∞-—Ä–µ—Å—Ç–æ—Ä–∞–Ω',
                'bonus': 0.20,
                'description': '–°–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞'
            },
            ('factory', 'it_startup'): {
                'name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω–µ—Ä–≥–∏—è',
                'bonus': 0.25,
                'description': 'IT-—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'
            },
            ('coffee_shop', 'farm'): {
                'name': '–ö–æ—Ñ–µ–π–Ω–∞—è —Ñ–µ—Ä–º–∞',
                'bonus': 0.18,
                'description': '–í—ã—Ä–∞—â–∏–≤–∞–Ω–∏–µ –∫–æ—Ñ–µ –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏'
            }
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–µ—Ä–≥–∏—é
        business_pair = tuple(sorted(business_types))
        if business_pair in synergies:
            synergy = synergies[business_pair]
            return {
                'has_synergy': True,
                'synergy_info': synergy,
                'income_bonus': synergy['bonus'],
                'expense_reduction': synergy['bonus'] * 0.5
            }
        
        return {
            'has_synergy': False,
            'synergy_info': None
        }
    
    def calculate_empire_value(self, player: Dict, businesses: List[Dict]) -> Dict:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å-–∏–º–ø–µ—Ä–∏–∏"""
        total_value = 0
        business_values = []
        
        for business in businesses:
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞
            base_value = business['income'] * 30
            
            # –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
            level_bonus = 1 + (business['level'] - 1) * 0.1
            
            # –ë–æ–Ω—É—Å –∑–∞ —É–ª—É—á—à–µ–Ω–∏—è
            improvements_bonus = 1 + len(business.get('improvements', [])) * 0.05
            
            # –ë–æ–Ω—É—Å –∑–∞ —Å–∏–Ω–µ—Ä–≥–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –±–∏–∑–Ω–µ—Å–∞–º–∏
            synergy_bonus = 1.0
            for other_business in businesses:
                if other_business['id'] != business['id']:
                    synergy = self.calculate_business_synergy(business, other_business)
                    if synergy['has_synergy']:
                        synergy_bonus += 0.05
            
            business_value = base_value * level_bonus * improvements_bonus * synergy_bonus
            business_values.append({
                'business_id': business['id'],
                'name': business['name'],
                'value': business_value,
                'synergy_bonus': synergy_bonus
            })
            
            total_value += business_value
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—Ä –∏–º–ø–µ—Ä–∏–∏
        empire_bonus = 1 + (len(businesses) - 1) * 0.05
        
        # –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä–æ–∫–∞
        player_bonus = 1 + (player['level'] - 1) * 0.02
        
        final_value = total_value * empire_bonus * player_bonus
        
        return {
            'total_value': final_value,
            'business_values': business_values,
            'empire_bonus': empire_bonus,
            'player_bonus': player_bonus,
            'empire_size': len(businesses)
        } 