import random
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from config import BUSINESS_TYPES, RANDOM_EVENTS, IMPROVEMENTS, DAILY_INCOME_MULTIPLIER, DAILY_EXPENSE_MULTIPLIER

class GameLogic:
    def __init__(self):
        self.random_events = RANDOM_EVENTS
        self.improvements = IMPROVEMENTS
        self.business_types = BUSINESS_TYPES
    
    def calculate_daily_income(self, business: Dict, improvements: List[str] = None) -> float:
        """–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞ –±–∏–∑–Ω–µ—Å–∞ —Å —É—á–µ—Ç–æ–º —É–ª—É—á—à–µ–Ω–∏–π"""
        base_income = business['income']
        total_boost = 1.0
        
        if improvements:
            for improvement in improvements:
                if improvement in self.improvements:
                    if 'income_boost' in self.improvements[improvement]:
                        total_boost += self.improvements[improvement]['income_boost']
        
        return base_income * total_boost * DAILY_INCOME_MULTIPLIER
    
    def calculate_daily_expenses(self, business: Dict, improvements: List[str] = None) -> float:
        """–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–∏–∑–Ω–µ—Å–∞ —Å —É—á–µ—Ç–æ–º —É–ª—É—á—à–µ–Ω–∏–π"""
        base_expenses = business['expenses']
        total_boost = 1.0
        
        if improvements:
            for improvement in improvements:
                if improvement in self.improvements:
                    if 'expense_boost' in self.improvements[improvement]:
                        total_boost += self.improvements[improvement]['expense_boost']
        
        # –ë–∞–∑–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π
        boosted = base_expenses * total_boost * DAILY_EXPENSE_MULTIPLIER
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        staff_salary = float(business.get('staff_salary', 0.0) or 0.0)
        return boosted + staff_salary
    
    def get_random_event(self, player_level: int = 1) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å —Å–æ–±—ã—Ç–∏—è
            event = random.choice(self.random_events)
            
            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞
            modified_event = event.copy()
            if 'income_bonus' in event:
                modified_event['income_bonus'] = int(event['income_bonus'] * (1 + player_level * 0.1))
            if 'expense_penalty' in event:
                modified_event['expense_penalty'] = int(event['expense_penalty'] * (1 + player_level * 0.1))
            
            return modified_event
        
        return None
    
    def apply_random_event(self, player: Dict, business: Dict, event: Dict) -> Dict:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∫ –∏–≥—Ä–æ–∫—É –∏ –±–∏–∑–Ω–µ—Å—É"""
        result = {
            'message': f"üé≤ *{event['title']}*\n{event['description']}",
            'income_change': 0,
            'expense_change': 0,
            'popularity_change': 0
        }
        
        if event['type'] == 'positive':
            if 'income_bonus' in event:
                result['income_change'] = event['income_bonus']
                result['message'] += f"\nüí∞ +{event['income_bonus']} ‚ÇΩ"
            
            if 'popularity_bonus' in event:
                result['popularity_change'] = event['popularity_bonus']
                result['message'] += f"\n‚≠ê +{int(event['popularity_bonus'] * 100)}% –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏"
        
        elif event['type'] == 'negative':
            if 'expense_penalty' in event:
                result['expense_change'] = -event['expense_penalty']
                result['message'] += f"\nüí∏ -{event['expense_penalty']} ‚ÇΩ"
            
            if 'popularity_penalty' in event:
                result['popularity_change'] = event['popularity_penalty']
                result['message'] += f"\nüìâ {int(event['popularity_penalty'] * 100)}% –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏"
            
            if 'income_multiplier' in event:
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –¥–æ—Ö–æ–¥
                result['income_change'] = business['income'] * (event['income_multiplier'] - 1)
                result['message'] += f"\nüìä –î–æ—Ö–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–µ–Ω"
        
        return result
    
    def can_afford_improvement(self, player_balance: float, improvement_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —É–ª—É—á—à–µ–Ω–∏–µ"""
        if improvement_type in self.improvements:
            return player_balance >= self.improvements[improvement_type]['cost']
        return False
    
    def apply_improvement(self, business: Dict, improvement_type: str) -> Dict:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∫ –±–∏–∑–Ω–µ—Å—É"""
        if improvement_type not in self.improvements:
            return {'success': False, 'message': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ'}
        
        improvement = self.improvements[improvement_type]
        current_improvements = business.get('improvements', [])
        
        if improvement_type in current_improvements:
            return {'success': False, 'message': '–£–ª—É—á—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ'}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ
        new_improvements = current_improvements + [improvement_type]
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –∏ —Ä–∞—Å—Ö–æ–¥—ã
        new_income = business['income']
        new_expenses = business['expenses']
        
        if 'income_boost' in improvement:
            new_income *= (1 + improvement['income_boost'])
        
        if 'expense_boost' in improvement:
            new_expenses *= (1 + improvement['expense_boost'])
        
        return {
            'success': True,
            'message': f"‚úÖ {improvement['name']} –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!\n{improvement['description']}",
            'new_income': new_income,
            'new_expenses': new_expenses,
            'new_improvements': new_improvements,
            'cost': improvement['cost']
        }
    
    def calculate_business_value(self, business: Dict) -> float:
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏"""
        base_value = business['income'] * 30  # 30 –¥–Ω–µ–π –¥–æ—Ö–æ–¥–∞
        
        # –ë–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å
        level_bonus = 1 + (business['level'] - 1) * 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ —É–ª—É—á—à–µ–Ω–∏—è
        improvements_bonus = 1 + len(business.get('improvements', [])) * 0.05
        
        return base_value * level_bonus * improvements_bonus
    
    def calculate_level_up_experience(self, current_level: int) -> int:
        """–†–∞—Å—á–µ—Ç –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è"""
        return current_level * 1000
    
    def can_level_up(self, current_experience: int, current_level: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å"""
        required_exp = self.calculate_level_up_experience(current_level)
        return current_experience >= required_exp
    
    def level_up_player(self, player: Dict) -> Dict:
        """–ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∏–≥—Ä–æ–∫–∞"""
        if not self.can_level_up(player['experience'], player['level']):
            return {'success': False, 'message': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è'}
        
        new_level = player['level'] + 1
        remaining_exp = player['experience'] - self.calculate_level_up_experience(player['level'])
        
        # –ë–æ–Ω—É—Å—ã –∑–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        level_bonuses = {
            'income_multiplier': 1 + (new_level - 1) * 0.05,
            'popularity_bonus': 0.1,
            'balance_bonus': new_level * 1000
        }
        
        return {
            'success': True,
            'message': f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!\nüí∞ +{level_bonuses['balance_bonus']} ‚ÇΩ –±–æ–Ω—É—Å\n‚≠ê +{int(level_bonuses['popularity_bonus'] * 100)}% –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏",
            'new_level': new_level,
            'remaining_experience': remaining_exp,
            'bonuses': level_bonuses
        }
    
    def calculate_competition_bonus(self, player_popularity: float, competitor_popularity: float) -> float:
        """–†–∞—Å—á–µ—Ç –±–æ–Ω—É—Å–∞ –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –±–æ—Ä—å–±–µ"""
        if player_popularity > competitor_popularity:
            return 1 + (player_popularity - competitor_popularity) * 0.1
        elif player_popularity < competitor_popularity:
            return 1 - (competitor_popularity - player_popularity) * 0.05
        else:
            return 1.0
    
    def generate_business_name(self, business_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞"""
        business_info = self.business_types.get(business_type, {})
        business_name = business_info.get('name', '–ë–∏–∑–Ω–µ—Å')
        
        # –ü—Ä–æ—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∏–∑–Ω–µ—Å–∞
        names = {
            'coffee_shop': ['Bean Master', 'Coffee Corner', 'Aroma Cafe', 'Brew House'],
            'restaurant': ['Gourmet Palace', 'Taste Haven', 'Culinary Delight', 'Flavor Fusion'],
            'factory': ['Industrial Power', 'Production Pro', 'Manufacturing Hub', 'Factory Force'],
            'it_startup': ['Tech Vision', 'Digital Dreams', 'Innovation Lab', 'Future Tech'],
            'farm': ['Green Fields', 'Nature\'s Bounty', 'Organic Harvest', 'Farm Fresh']
        }
        
        if business_type in names:
            return f"{random.choice(names[business_type])}"
        else:
            return f"{business_name} #{random.randint(1000, 9999)}"
    
    def calculate_daily_progress(self, player: Dict, businesses: List[Dict]) -> Dict:
        """–†–∞—Å—á–µ—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–≥—Ä–æ–∫–∞"""
        total_income = 0
        total_expenses = 0
        total_experience = 0
        
        for business in businesses:
            daily_income = self.calculate_daily_income(business, business.get('improvements', []))
            daily_expenses = self.calculate_daily_expenses(business, business.get('improvements', []))
            
            total_income += daily_income
            total_expenses += daily_expenses
            
            # –û–ø—ã—Ç –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            total_experience += int(daily_income * 0.1)
        
        net_income = total_income - total_expenses
        
        return {
            'total_income': total_income,
            'total_expenses': total_expenses,
            'net_income': net_income,
            'experience_gained': total_experience
        }
    
    def check_achievements(self, player: Dict, businesses: List[Dict]) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–∞"""
        achievements = []
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –±–∞–ª–∞–Ω—Å—É
        if player['balance'] >= 1000000 and player['level'] >= 5:
            achievements.append({
                'type': 'balance',
                'title': '–ú–∏–ª–ª–∏–æ–Ω–µ—Ä',
                'description': '–î–æ—Å—Ç–∏–≥ –±–∞–ª–∞–Ω—Å–∞ –≤ 1,000,000 ‚ÇΩ'
            })
        
        if player['balance'] >= 100000:
            achievements.append({
                'type': 'balance',
                'title': '–°–æ—Ç–Ω—è —Ç—ã—Å—è—á',
                'description': '–î–æ—Å—Ç–∏–≥ –±–∞–ª–∞–Ω—Å–∞ –≤ 100,000 ‚ÇΩ'
            })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –±–∏–∑–Ω–µ—Å–æ–≤
        if len(businesses) >= 5:
            achievements.append({
                'type': 'businesses',
                'title': '–ë–∏–∑–Ω–µ—Å-–º–∞–≥–Ω–∞—Ç',
                'description': '–í–ª–∞–¥–µ–µ—Ç–µ 5+ –±–∏–∑–Ω–µ—Å–∞–º–∏'
            })
        
        if len(businesses) >= 10:
            achievements.append({
                'type': 'businesses',
                'title': '–ò–º–ø–µ—Ä–∏—è',
                'description': '–í–ª–∞–¥–µ–µ—Ç–µ 10+ –±–∏–∑–Ω–µ—Å–∞–º–∏'
            })
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
        if player['level'] >= 10:
            achievements.append({
                'type': 'level',
                'title': '–≠–∫—Å–ø–µ—Ä—Ç',
                'description': '–î–æ—Å—Ç–∏–≥–ª–∏ 10 —É—Ä–æ–≤–Ω—è'
            })
        
        return achievements 